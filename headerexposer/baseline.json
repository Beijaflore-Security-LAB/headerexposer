{
	"headers": [
		{
			"name": "Strict-Transport-Security",
			"description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797. A server implements an HSTS policy by supplying a header (Strict-Transport-Security) over an HTTPS connection (HSTS headers over HTTP are ignored).",
			"case_sensitive_patterns": false,
			"validation_pattern": "^(.*?;)?\\s*?max-age\\s*?=\\s*?(\"\\d+\"|\\d+)\\s*?(;.*)?$",
			"default_rating": "bad",
			"absent_rating": "bad",
			"invalid_rating": "bad",
			"absent_explanation": "[red]The header is absent. [normal]",
			"invalid_explanation": "[red]This header is malformed and does not specify a max-age property or the property is invalid. [normal]",
			"absent_or_invalid_explanation": "It is recommended to set the header's value to \"[blue]max-age=31536000; includeSubDomains; preload[normal]\". This will tell users' browsers that this site is only to be accessed using HTTPS during the next 31536000 seconds (1 year), that this also applies to all of the site's subdomains, and it will enable HSTS preloading, which forbids major modern browsers to connect to the site using HTTP, even upon the first connection. [blue]For HSTS preloading to work properly, the website must be submitted to the public HSTS preloading lists.[normal]",
			"explanation_patterns": [
				{
					"pattern": "^.*?max-age\\s*?=\\s*?\"?(3153[6-8][0-9]{3}|31539[0-8][0-9]{2}|315399[0-8][0-9]|3153999[0-9]|315[4-9][0-9]{4}|31[6-9][0-9]{5}|3[2-9][0-9]{6}|[4-9][0-9]{7}|100000000)\"?.*?$",
					"present": "[green]This header tells the user's browser that this site is only to be accessed using HTTPS during the next \\1 seconds."
				},
				{
					"pattern": "^.*?max-age\\s*?=\\s*?\"?0\"?.*?$",
					"present": "[red]This header specifies a max-age of 0 seconds. It is worse than not specifying the header, because it actively tells the user's browser to remove its cached HSTS Policy information for this website! [blue]It is recommended to set the max-age property to 31536000 seconds (1 year)."
				},
				{
					"pattern": "^.*?max-age\\s*?=\\s*?\"?([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|[1-8][0-9]{3}|9[0-8][0-9]{2}|99[0-8][0-9]|999[0-9]|[1-8][0-9]{4}|9[0-8][0-9]{3}|99[0-8][0-9]{2}|999[0-8][0-9]|9999[0-9]|[1-8][0-9]{5}|9[0-8][0-9]{4}|99[0-8][0-9]{3}|999[0-8][0-9]{2}|9999[0-8][0-9]|99999[0-9]|[1-8][0-9]{6}|9[0-8][0-9]{5}|99[0-8][0-9]{4}|999[0-8][0-9]{3}|9999[0-8][0-9]{2}|99999[0-8][0-9]|999999[0-9]|[12][0-9]{7}|30[0-9]{6}|31[0-4][0-9]{5}|315[0-2][0-9]{4}|3153[0-4][0-9]{3}|31535[0-8][0-9]{2}|315359[0-8][0-9]|3153599[0-9])\"?\\s*?(;.*?)?$",
					"present": "[yellow]This header tells the user's browser that this site is only to be accessed using HTTPS during the next \\1 seconds. This is shorter than the recommended value of 31536000 seconds (1 year)."
				},
				{
					"pattern": "^(.*?;)?\\s*?includeSubDomains\\s*?(;.*?)?$",
					"present": "As \"includeSubDomains\" is specified, this rule applies to all of the site's subdomains as well.[normal]",
					"absent": "[yellow]As \"includeSubDomains\" is not specified, this rule does not apply to the site's subdomains. It is recommended to specify \"includeSubDomains\" as well.[normal]"
				},
				{
					"pattern": "^.*?;\\s*?max-age\\s*?=\\s*?\"?(3153[6-8][0-9]{3}|31539[0-8][0-9]{2}|315399[0-8][0-9]|3153999[0-9]|315[4-9][0-9]{4}|31[6-9][0-9]{5}|3[2-9][0-9]{6}|[4-9][0-9]{7}|100000000)\"\\s*?;\\s*?includeSubDomains\\s*?;\\s*?preload\\s*?(;.*?)?$",
					"present": "[green]The \"preload\" directive enables HSTS preloading, which forbids major modern browsers to connect to the site using HTTP, even upon the first connection. The website must still have been submitted to the public HSTS preloading lists.[normal]"
				},
				{
					"pattern": "^((?!.*max-age\\s*?=\\s*\"?(3153[6-8][0-9]{3}|31539[0-8][0-9]{2}|315399[0-8][0-9]|3153999[0-9]|315[4-9][0-9]{4}|31[6-9][0-9]{5}|3[2-9][0-9]{6}|[4-9][0-9]{7}|100000000))|(?!.*includeSubDomains)).*?;\\s*?preload\\s*?(;.*)?$",
					"present": "[yellow]The \"preload\" directive, which enables HSTS preloading and forbids major modern browsers to connect to the site using HTTP, even upon the first connection, is present. [red]However, the header does not meet the minimum requirements for HSTS preloading to be enabled![blue] For HSTS preloading to be enabled, the max-age property must be at least 31536000 seconds, the includeSubDomains directive must be specified, and the website must have been submitted to the public HSTS preloading lists.[normal]"
				},
				{
					"pattern": "^(.*?;)?\\s*?preload\\s*?(;.*?)?$",
					"absent": "[yellow]The \"preload\" directive is absent, and HSTS preloading is not enabled. [blue]It is recommended to enable HSTS preloading. Before HSTS preloading can be enabled, the header must meet the minimum requirements of a 31536000 seconds max-age, have the \"includeSubDomains\" directive set, and the website must have been submitted to the public HSTS lists.[normal]"
				}
			],
			"rating_patterns": [
				{
					"pattern": "^(.*?;)?\\s*?max-age\\s*?=\\s*?\"?[1-9]\\d*\"?\\s*?(;.*?)?$",
					"rating": "medium"
				},
				{
					"pattern": "^(.*;)?\\s*max-age\\s*=\\s*\"?(3153[6-8][0-9]{3}|31539[0-8][0-9]{2}|315399[0-8][0-9]|3153999[0-9]|315[4-9][0-9]{4}|31[6-9][0-9]{5}|3[2-9][0-9]{6}|[4-9][0-9]{7}|100000000)\"?\\s*;\\s*includeSubDomains\\s*;\\s*preload\\s*(;.*)?$",
					"rating": "good"
				}
			],
			"references": [
				"https://owasp.org/www-project-secure-headers/#http-strict-transport-security-hsts",
				"https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html",
				"https://tools.ietf.org/html/rfc6797",
				"https://hstspreload.org",
				"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security"
			]
		},
		{
			"name": "X-Frame-Options",
			"description": "The X-Frame-Options response header improves the protection of web applications against clickjacking. It instructs the browser whether the content can be displayed within frames. The CSP frame-ancestors directive obsoletes the X-Frame-Options header. If a resource has both policies, the CSP frame-ancestors policy will be enforced and the X-Frame-Options policy will be ignored.",
			"case_sensitive_patterns": false,
			"validation_pattern": "^(DENY|SAMEORIGIN|ALLOW-FROM\\s+.*)$",
			"default_rating": "bad",
			"absent_rating": "bad",
			"invalid_rating": "bad",
			"absent_explanation": "[red]The header is absent. [yellow]If a CSP frame-ancestors directive is used, this can be safely ignored. [normal] If not, the [blue]CSP frame-ancestors directive[normal] should be used.",
			"invalid_explanation": "[red]The header is malformed. [normal]The [blue]CSP frame-ancestors[normal] directive should be used instead.",
			"explanation_patterns": [
				{
					"pattern": "^DENY$",
					"present": "[green]This header tells the user's browser to do no rendering within a frame. [normal]This is a good security measure but it should be replaced with the [blue]CSP frame-ancestors[normal] directive."
				},
				{
					"pattern": "^SAMEORIGIN$",
					"present": "[green]This header tells the user's browser to only render frames which have the same origin as the page itself. [normal]This is a good security measure but it should be replaced by the [blue]CSP frame-ancestors[normal] directive."
				},
				{
					"pattern": "^ALLOW-FROM.*$",
					"present": "[red]The use of the \"ALLOW-FROM\" directive is deprecated and no longer works in modern browsers. [normal]The [blue]CSP frame-ancestors[normal] directive should be used instead."
				}
			],
			"rating_patterns": [
				{
					"pattern": "^(DENY|SAMEORIGIN)$",
					"rating": "good"
				}
			],
			"references": [
				"https://tools.ietf.org/html/rfc7034",
				"https://owasp.org/www-project-secure-headers/#x-frame-options",
				"https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html",
				"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"
			]
		},
		{
			"name": "X-Content-Type-Options",
			"description": "Setting this header will prevent the browser from interpreting files as a different MIME type to what is specified in the Content-Type HTTP header (e.g. treating text/plain as text/css).",
			"case_sensitive_patterns": false,
			"validation_pattern": "^nosniff$",
			"default_rating": "good",
			"absent_rating": "bad",
			"invalid_rating": "bad",
			"absent_or_invalid_explanation": "[red]The header is either absent or malformed. [normal]The recommended value for this header is \"[blue]nosniff[normal]\".",
			"explanation_patterns": [{
				"pattern": "^nosniff$",
				"present": "[green]The header is set to \"nosniff\", and the website is protected against MIME type sniffing. This is the recommended value.[normal]"
			}],
			"final_explanation": "This will prevent potential attackers to transform non-executable MIME types into executable MIME types. If the Content-Type header is set to a HTML, XML or JSON MIME type, this also enables Cross-Origin Read Blocking in Google Chrome. [blue]For this header to have any effect, the website's Content-Type header MUST be set to a proper MIME-type value.[normal]",
			"references": [
				"https://owasp.org/www-project-secure-headers/#x-content-type-options",
				"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options"
			]
		},
		{
			"name": "Content-Security-Policy",
			"description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate a wide range of attacks, including Cross-Site Scripting (XSS) and other cross-site injections. A Content Security Policy (CSP) requires careful tuning and precise definition of the policy. If enabled, CSP has significant impact on the way browsers render pages (e.g., inline JavaScript is disabled by default and must be explicitly allowed in the policy). Because of content security policies' inherent complexity, the rating can only be \"bad\" if no CSP header is present, and \"medium\" if a CSP header is present. No further analysis is made. As a general rule, whitelist-based policies are not considered secure as attackers can bypass whitelists, and resources are often loaded from Content Delivery Networks (CDNs) over which there is little control. The most efficient CSPs are nonce-based. Major frameworks usually support automatically generated nonce mechanisms. The best resource to learn how to build a best-in-class, nonce-based CSP would be [blue][underline]https://csp.withgoogle.com[normal].",
			"case_sensitive_patterns": false,
			"validation_pattern": "^.*$",
			"default_rating": "medium",
			"absent_rating": "bad",
			"invalid_rating": "bad",
			"absent_explanation": "[red]No CSP is defined, and the header is absent. [normal]As a good CSP is currently the best way to protect a website against XSS, [blue]building a CSP should be a top priority.[normal]",
			"explanation_patterns": [{
				"pattern": "^.*$",
				"present": "[yellow]The header is present, but was not analysed. [normal]Please consider using [blue][underline]https://csp-evaluator.withgoogle.com/[normal] to assess the CSP header's value."
			}],
			"references": [
				"https://owasp.org/www-project-secure-headers/#content-security-policy",
				"https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html",
				"https://content-security-policy.com/",
				"https://www.w3.org/TR/CSP2/",
				"https://www.w3.org/TR/CSP3/",
				"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP",
				"https://csp.withgoogle.com/docs/index.html",
				"https://csp.withgoogle.com/docs/adopting-csp.html",
				"https://csp.withgoogle.com/docs/strict-csp.html",
				"https://csp-evaluator.withgoogle.com/",
				"https://scotthelme.co.uk/csp-cheat-sheet/",
				"https://speakerdeck.com/lweichselbaum/csp-a-successful-mess-between-hardening-and-mitigation"
			]
		},
		{
			"name": "X-Permitted-Cross-Domain-Policies",
			"description": "A cross-domain policy file is an XML document that grants a web client, such as Adobe Flash Player or Adobe Acrobat (though not necessarily limited to these), permission to handle data across domains. When clients request content hosted on a particular source domain and that content makes requests directed towards a domain other than its own, the remote domain needs to host a cross-domain policy file that grants access to the source domain, allowing the client to continue the transaction.",
			"case_sensitive_patterns": false,
			"validation_pattern": "^(none|master-only|by-content-type|by-ftp-filename|all)$",
			"default_rating": "bad",
			"absent_rating": "bad",
			"invalid_rating": "bad",
			"absent_explanation": "[red]The header is absent.[normal]",
			"invalid_explanation": "[red]The header is malformed.[normal]",
			"absent_or_invalid_explanation": "If a cross-domain policy file is present on the website (either by accident or malice), [red]the website's content may be embed in PDF files.[normal] This may allow attackers to conduct targetted attacks such as spear-fishing. If the website's content are not to be embedded in PDF files, it is recommended to set the header's value to \"[blue]none[normal]\". Otherwise, you must create a cross-domain policy served by the website's root, and the header's value should be \"[blue]master-only[normal]\".",
			"explanation_patterns": [
				{
					"pattern": "^none$",
					"present": "[green]This header forbids PDF readers from embedding the website's content inside PDF files.[normal] This is the recommended value if the website's content is not to be embedded in PDF files."
				},
				{
					"pattern": "^master-only$",
					"present": "[green]This header instructs PDF readers to apply the cross-domain policy served from this website's root.[normal] This is the recommended value if the website's content is to be embedded in PDF files."
				},
				{
					"pattern": "^by-content-type$",
					"present": "[red]Any policy files served with Content-Type: text/x-cross-domain-policy are allowed, even if they are served by third-parties.[normal] This may allow attackers to conduct targetted attacks such as spear-fishing. If the website's content is to be embedded in PDF files, it is recommended to serve the cross-domain policy from the website's root and to set the header's value to \"[blue]master-only[normal]\". If the website's content are not to be embedded in PDF files, it is recommended to set the header's value to \"[blue]none[normal]\"."
				},
				{
					"pattern": "^by-ftp-filename$",
					"present": "[red]Any policy files served by FTP whose file names are crossdomain.xml are allowed, even if they are served by third-parties.[normal] This may allow attackers to conduct targetted attacks such as spear-fishing. If the website's content is to be embedded in PDF files, it is recommended to serve the cross-domain policy from the website's root and to set the header's value to \"[blue]master-only[normal]\". If the website's content are not to be embedded in PDF files, it is recommended to set the header's value to \"[blue]none[normal]\"."
				},
				{
					"pattern": "^all$",
					"present": "[red]All policy files are allowed, even if they are served by third-parties.[normal] This may allow attackers to conduct targetted attacks such as spear-fishing. If the website's content is to be embedded in PDF files, it is recommended to serve the cross-domain policy from the website's root and to set the header's value to \"[blue]master-only[normal]\". If the website's content are not to be embedded in PDF files, it is recommended to set the header's value to \"[blue]none[normal]\"."
				}
			],
			"rating_patterns": [
				{
					"pattern": "^(none|master-only)$",
					"rating": "good"
				}
			],
			"references": [
				"https://owasp.org/www-project-secure-headers/#x-permitted-cross-domain-policies",
				"https://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html"
			]
		},
		{
			"name": "Referrer-Policy",
			"description": "The Referrer-Policy HTTP header governs which referrer information, sent in the Referer header, should be included with requests made.",
			"case_sensitive_patterns": false,
			"validation_pattern": "^((no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|same-origin|strict-origin|strict-origin-when-cross-origin|unsafe-url|)( *, *)?)*$",
			"default_rating": "bad",
			"absent_rating": "medium",
			"invalid_rating": "bad",
			"absent_explanation": "[yellow]The header is absent.[normal] This will cause a fallback to any referrer policy defined in the document. [blue]If this is the intended behavior, the header should be set to an empty string to avoid any ambiguity.[normal]",
			"invalid_explanation": "[red]The header is malformed.[normal] This will cause a fallback to any referrer policy defined in the document.",
			"absent_or_invalid_explanation": "If there is none, this is equivalent to specifying \"no-referrer-when-downgrade\".[normal] This forbids the user's browser to send a Referer header over insecure channels. [yellow]While this is not considered insecure, the full origin, path and querystring may be sent to third parties. [blue]It is recommended to specify \"strict-origin-when-cross-origin\" unless it would break functionality.[normal] This would be equivalent to specifying \"no-referrer-when-downgrade\" with the added benefit of only sending the origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/) to third parties. [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]",
			"explanation_patterns": [
				{
					"pattern": "^no-referrer( *, *.*?)*$",
					"present": "[green]This header forbids the user's browser to send any Referer header along with requests. This is the recommended value.[normal]"
				},
				{
					"pattern": "^no-referrer-when-downgrade( *, *.*?)*$",
					"present": "This header forbids the user's browser to send a Referer header over insecure channels. [yellow]While this is not considered insecure, the full origin, path and querystring may be sent to third parties. [blue]It is recommended to specify \"strict-origin-when-cross-origin\" unless it would break functionality.[normal] This would be equivalent to specifying \"no-referrer-when-downgrade\" with the added benefit of only sending the origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/) to third parties. [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]"
				},
				{
					"pattern": "^origin( *, *.*?)*$",
					"present": "This header instructs the user's browser to send a Referer header containing only the document's origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/).[red] The document's origin may transit over insecure channels.[normal] To only disclose the document's origin over secure channels, it would be recommended to use \"[blue]strict-origin[normal]\" instead. [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]"
				},
				{
					"pattern": "^origin-when-cross-origin( *, *.*?)*$",
					"present": "This header instructs the user's browser to send a Referer header containing only the document's origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/) to third parties, and a full URL when performing a same-origin request.[red] The full origin, path and querystring may transit over insecure channels.[normal] To only disclose the document's origin to third parties, and disclose nothing over insecure channels, it would be recommended to use \"[blue]strict-origin-when-cross-origin[normal]\" instead. [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]"
				},
				{
					"pattern": "^same-origin( *, *.*?)*$",
					"present": "This header forbids the user's browser to send a Referer header to third parties. [red]The full origin, path and querystring may transit over insecure channels. [blue]It is recommended to specify \"strict-origin-when-cross-origin\" instead.[normal] This would be equivalent to specifying \"no-referrer-when-downgrade\", which would forbid the user's browser to send any Referer header over insecure channels, with the added benefit of only sending the origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/) to third parties. [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]"
				},
				{
					"pattern": "^strict-origin( *, *.*?)*$",
					"present": "[green]This header forbids the user's browser to send a Referer header over insecure channels, and instructs to only send the document's origin to secure channels[normal] (e.g. a document at https://example.com/page.html will send the referrer https://example.com/). [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]"
				},
				{
					"pattern": "^strict-origin-when-cross-origin( *, *.*?)*$",
					"present": "[green]This header instructs the user's browser to never send a Referer header over insecure channels, and to only send the document's origin to third parties[normal] (e.g. a document at https://example.com/page.html will send the referrer https://example.com/). [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]"
				},
				{
					"pattern": "^unsafe-url( *, *.*?)*$",
					"present": "[red]A full Referer header containing the full origin, path and querystring will be sent in every requests, including over insecure channels and to third parties. [blue]It is recommended to specify \"strict-origin-when-cross-origin\" instead.[normal] This would be equivalent to specifying \"no-referrer-when-downgrade\", which would forbid the user's browser to send any Referer header over insecure channels, with the added benefit of only sending the origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/) to third parties. [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]"
				},
				{
					"pattern": "^$",
					"present": "[yellow]The header's value is an empty string.[normal] This will cause a fallback to any referrer policy defined in the document. [green]If this is the intended behavior, this can be safely ignored.[normal] If there is none, this is equivalent to specifying \"no-referrer-when-downgrade\". This forbids the user's browser to send a Referer header over insecure channels. [yellow]While this is not considered insecure, the full origin, path and querystring may be sent to third parties. [blue]It is recommended to specify \"strict-origin-when-cross-origin\" unless it would break functionality.[normal] This would be equivalent to specifying \"no-referrer-when-downgrade\" with the added benefit of only sending the origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/) to third parties. [blue]If the Referer header is not used to provide functionality, \"no-referrer\" should be specified instead.[normal]"
				},
				{
					"pattern": "^(.*? *, *)+no-referrer( *, *.*?)*$",
					"present": "[green]As a fallback, this header forbids the user's browser to send any Referer header along with requests.[normal]"
				},
				{
					"pattern": "^(.*? *, *)+no-referrer-when-downgrade( *, *.*?)*$",
					"present": "As a fallback, this header forbids the user's browser to send a Referer header over insecure channels. [yellow]While this is not considered insecure, the full origin, path and querystring may be sent to third parties.[normal]"
				},
				{
					"pattern": "^(.*? *, *)+origin( *, *.*?)*$",
					"present": "As a fallback, this header instructs the user's browser to send a Referer header containing only the document's origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/).[red] The document's origin may transit over insecure channels.[normal]"
				},
				{
					"pattern": "^(.*? *, *)+origin-when-cross-origin( *, *.*?)*$",
					"present": "As a fallback, this header instructs the user's browser to send a Referer header containing only the document's origin (e.g. a document at https://example.com/page.html will send the referrer https://example.com/) to third parties, and a full URL when performing a same-origin request.[red] The full origin, path and querystring may transit over insecure channels.[normal]"
				},
				{
					"pattern": "^(.*? *, *)+same-origin( *, *.*?)*$",
					"present": "As a fallback, this header forbids the user's browser to send a Referer header to third parties. [red]The full origin, path and querystring may transit over insecure channels.[normal]"
				},
				{
					"pattern": "^(.*? *, *)+strict-origin( *, *.*?)*$",
					"present": "[green]As a fallback, this header forbids the user's browser to send a Referer header over insecure channels, and instructs to only send the document's origin to secure channels[normal] (e.g. a document at https://example.com/page.html will send the referrer https://example.com/)."
				},
				{
					"pattern": "^(.*? *, *)+strict-origin-when-cross-origin( *, *.*?)*$",
					"present": "[green]As a fallback, this header instructs the user's browser to never send a Referer header over insecure channels, and to only send the document's origin to third parties[normal] (e.g. a document at https://example.com/page.html will send the referrer https://example.com/)."
				},
				{
					"pattern": "^(.*? *, *)+unsafe-url( *, *.*?)*$",
					"present": "[red]As a fallback, a full Referer header containing the full origin, path and querystring will be sent in every requests, including over insecure channels and to third parties.[normal]"
				}
			],
			"rating_patterns": [
				{
					"pattern": "^(no-referrer-when-downgrade|)$",
					"rating": "medium"
				},
				{
					"pattern": "^(strict-origin-when-cross-origin|strict-origin|no-referrer)(?!.*( *, *)(origin|origin-when-cross-origin|same-origin|unsafe-url)( *, *.*?)*$).*$",
					"rating": "good"
				}
			],
			"references": [
				"https://owasp.org/www-project-secure-headers/#referrer-policy",
				"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy",
				"https://w3c.github.io/webappsec-referrer-policy/#referrer-policy-header"
			]
		},
		{
			"name": "Feature-Policy",
			"description": "The Feature-Policy header provides a mechanism to allow and deny the use of browser features in its own frame, and in content within any <iframe> elements in the document. [blue]This header is still in an experimental state, and is subject to change at any time. [yellow]It has now been renamed to Permissions-Policy in the spec, but most browsers still process this name.[normal] The two most well supported values are [blue]microphone[normal] and [blue]camera[normal]. For all the other ones, please consult https://caniuse.com/?search=Feature-Policy.",
			"case_sensitive_patterns": false,
			"validation_pattern": "^(accelerometer|ambient-light-sensor|autoplay|battery|camera|display-capture|document-domain|encrypted-media|execution-while-not-rendered|execution-while-out-of-viewport|fullscreen|geolocation|gyroscope|layout-animations|legacy-image-formats|magnetometer|microphone|midi|navigation-override|oversized-images|payment|picture-in-picture|publickey-credentials-get|sync-xhr|usb|vr|wake-lock|screen-wake-lock|web-share|xr-spatial-tracking) +(|)( +(|))*()*$"
		}
	]
}
